// –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –∏–∑ Persona
const tracks = [
    {
        title: "Burn My Dread",
        url: "music/01. Burn My Dread.mp3",
        unlocked: true
    },
    {
        title: "Wake Up, Get Up, Get Out There (Revelations Arrange)",
        url: "music/5-20. Wake Up, Get Up, Get Out There -Revelations Arrange-.mp3",
        unlocked: true
    },
    {
        title: "Phantom",
        url: "music/1-02. Phantom.mp3",
        unlocked: false
    },
    {
        title: "King, Queen and Slaves",
        url: "music/1-16. King, Queen and Slaves.mp3",
        unlocked: false
    },
    {
        title: "King, Queen and Slaves (Another Version)",
        url: "music/1-15. King, Queen and Slaves -another version-.mp3",
        unlocked: false
    }
];

let currentTrackIndex = -1;
let isMusicPlaying = false;

const musicButton = document.querySelector('.music-button');
const musicIcon = document.querySelector('.music-icon');
const currentTrackElement = document.querySelector('.current-track');
const bgMusic = document.getElementById('bgMusic');
const volumeSlider = document.getElementById('volumeSlider');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
bgMusic.volume = volumeSlider.value / 100;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
volumeSlider.addEventListener('input', (e) => {
    const volume = e.target.value / 100;
    bgMusic.volume = volume;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –ø–æ–ª–∑—É–Ω–∫–∞
    e.target.style.setProperty('--value', `${e.target.value}%`);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    const volumeIcon = document.querySelector('.volume-icon');
    if (volume === 0) {
        volumeIcon.textContent = 'üîá';
    } else if (volume < 0.5) {
        volumeIcon.textContent = 'üîâ';
    } else {
        volumeIcon.textContent = 'üîä';
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
volumeSlider.style.setProperty('--value', `${volumeSlider.value}%`);

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
function preloadAudio(url) {
    const audio = new Audio();
    audio.src = url;
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
tracks.forEach(track => preloadAudio(track.url));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤
function updateTracksList() {
    const tracksList = document.querySelector('.tracks-list');
    tracksList.innerHTML = '';

    tracks.forEach((track, index) => {
        const trackItem = document.createElement('div');
        trackItem.className = `track-item ${track.unlocked ? '' : 'locked'} ${index === currentTrackIndex ? 'playing' : ''}`;
        
        trackItem.innerHTML = `
            <span class="track-icon ${index === currentTrackIndex ? 'playing' : ''}">${index === currentTrackIndex ? 'üéµ' : 'üéº'}</span>
            <div class="track-info">
                <div class="track-title">${track.title}</div>
                <div class="track-status">${track.unlocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}</div>
            </div>
        `;

        if (track.unlocked) {
            trackItem.addEventListener('click', () => {
                if (index !== currentTrackIndex) {
                    currentTrackIndex = index;
                    bgMusic.src = track.url;
                    bgMusic.play().catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                    });
                    musicButton.classList.add('playing');
                    updateCurrentTrackDisplay();
                    updateTracksList();
                }
            });
        }

        tracksList.appendChild(trackItem);
    });
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateCurrentTrackDisplay
function updateCurrentTrackDisplay() {
    if (currentTrackIndex !== -1 && !bgMusic.paused) {
        currentTrackElement.textContent = `–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${tracks[currentTrackIndex].title}`;
        currentTrackElement.classList.add('visible');
    } else {
        currentTrackElement.classList.remove('visible');
    }
    updateTracksList();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
function playRandomTrack() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
    const unlockedTracks = tracks.filter(track => track.unlocked);
    const randomIndex = Math.floor(Math.random() * unlockedTracks.length);
    currentTrackIndex = tracks.findIndex(track => track === unlockedTracks[randomIndex]);
    
    bgMusic.onerror = function() {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', bgMusic.error);
        currentTrackElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ';
        currentTrackElement.classList.add('visible');
    };
    
    bgMusic.src = tracks[currentTrackIndex].url;
    bgMusic.volume = volumeSlider.value / 100;
    
    bgMusic.play().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        currentTrackElement.textContent = '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è';
        currentTrackElement.classList.add('visible');
    });
    
    updateCurrentTrackDisplay();
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const prevButton = document.querySelector('.prev-track');
const playPauseButton = document.querySelector('.play-pause');
const nextButton = document.querySelector('.next-track');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
function playPreviousTrack() {
    const unlockedTracks = tracks.filter(track => track.unlocked);
    const currentUnlockedIndex = unlockedTracks.findIndex(track => track === tracks[currentTrackIndex]);
    const prevUnlockedIndex = (currentUnlockedIndex - 1 + unlockedTracks.length) % unlockedTracks.length;
    
    currentTrackIndex = tracks.findIndex(track => track === unlockedTracks[prevUnlockedIndex]);
    bgMusic.src = tracks[currentTrackIndex].url;
    bgMusic.play().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    });
    musicButton.classList.add('playing');
    updateCurrentTrackDisplay();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
function playNextTrack() {
    const unlockedTracks = tracks.filter(track => track.unlocked);
    const currentUnlockedIndex = unlockedTracks.findIndex(track => track === tracks[currentTrackIndex]);
    const nextUnlockedIndex = (currentUnlockedIndex + 1) % unlockedTracks.length;
    
    currentTrackIndex = tracks.findIndex(track => track === unlockedTracks[nextUnlockedIndex]);
    bgMusic.src = tracks[currentTrackIndex].url;
    bgMusic.play().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    });
    musicButton.classList.add('playing');
    updateCurrentTrackDisplay();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
function updatePlayPauseButton() {
    playPauseButton.textContent = bgMusic.paused ? '‚èØÔ∏è' : '‚è∏Ô∏è';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
prevButton.addEventListener('click', playPreviousTrack);
nextButton.addEventListener('click', playNextTrack);

playPauseButton.addEventListener('click', () => {
    if (bgMusic.paused) {
        if (currentTrackIndex === -1) {
            playRandomTrack();
        } else {
            bgMusic.play().catch(error => {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
            });
        }
        musicButton.classList.add('playing');
    } else {
        bgMusic.pause();
        musicButton.classList.remove('playing');
    }
    updateCurrentTrackDisplay();
    updatePlayPauseButton();
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
bgMusic.addEventListener('ended', () => {
    playNextTrack();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
bgMusic.addEventListener('play', updatePlayPauseButton);
bgMusic.addEventListener('pause', updatePlayPauseButton);

let score = 0;
let clicksPerSecond = 0;
let autoClickerCount = 0;
let multiplier = 1;
let multiplierLevel = 0;
let lastClickTime = Date.now();

// –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏–π
let autoClickerBasePrice = 100;
let multiplierBasePrice = 200;
let speedUpgradeBasePrice = 325;

// –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏–π
let currentAutoClickerPrice = autoClickerBasePrice;
let currentMultiplierPrice = multiplierBasePrice;
let currentSpeedUpgradePrice = speedUpgradeBasePrice;

// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã (1.15 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –º–Ω–æ–≥–∏—Ö –∫–ª–∏–∫–µ—Ä–æ–≤)
const priceGrowthRate = 1.15;

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
let autoClickerInterval = 1000; // –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
let speedUpgradeLevel = 0; // —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
const speedUpgradeMultiplier = 0.9; // –∫–∞–∂–¥–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —É—Å–∫–æ—Ä—è–µ—Ç –Ω–∞ 10%

const scoreElement = document.getElementById('score');
const clicksPerSecondElement = document.getElementById('clicks-per-second');
const clickArea = document.getElementById('clickArea');
const autoClickerButton = document.getElementById('autoClickerButton');
const multiplierButton = document.getElementById('multiplierButton');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ—á–∫–æ–≤
function createScorePopup(amount) {
    const popup = document.createElement('div');
    const finalScore = Math.floor(amount * multiplier);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –ø–ª—é—Å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ
    popup.textContent = `+${finalScore}`;
    popup.className = 'score-popup';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–∏ –∫–ª–∏–∫–∞
    const clickAreaRect = clickArea.getBoundingClientRect();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏ –∫–ª–∏–∫–∞
    const randomX = Math.random() * (clickAreaRect.width - 60); // 60px - –ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    const randomY = Math.random() * (clickAreaRect.height - 30); // 30px - –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    popup.style.left = `${randomX}px`;
    popup.style.top = `${randomY}px`;
    
    // –°–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const randomRotation = (Math.random() - 0.5) * 30;
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    const randomDirection = Math.random() * Math.PI * 2;
    const moveDistance = 100; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    const moveX = Math.cos(randomDirection) * moveDistance;
    const moveY = Math.sin(randomDirection) * moveDistance;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    if (finalScore > 100) {
        popup.style.fontSize = '2.5em';
        popup.style.textShadow = `
            0 0 15px rgba(255, 51, 51, 0.9),
            0 0 25px rgba(255, 51, 51, 0.5),
            0 0 35px rgba(255, 51, 51, 0.3)
        `;
    }
    
    // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (–æ—Ç—Ç–µ–Ω–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ)
    const hue = 0; // –∫—Ä–∞—Å–Ω—ã–π
    const saturation = 100;
    const lightness = 50 + Math.random() * 10;
    popup.style.color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
    
    // –°–æ–∑–¥–∞–µ–º keyframes –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    popup.style.animation = 'none';
    popup.style.transform = `
        translate(0, 0) 
        scale(0.5) 
        rotate(${randomRotation}deg)
    `;
    popup.style.opacity = '0';
    
    clickArea.appendChild(popup);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ
    requestAnimationFrame(() => {
        popup.style.transition = 'all 1s cubic-bezier(0.4, 0, 0.2, 1)';
        popup.style.transform = `
            translate(${moveX}px, ${moveY}px) 
            scale(1.2) 
            rotate(${randomRotation * -0.5}deg)
        `;
        popup.style.opacity = '1';
        
        setTimeout(() => {
            popup.style.transform = `
                translate(${moveX * 1.5}px, ${moveY * 1.5}px) 
                scale(0.8) 
                rotate(${randomRotation * -1}deg)
            `;
            popup.style.opacity = '0';
        }, 500);
    });
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        popup.remove();
    }, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
function updateButtonTexts() {
    autoClickerButton.textContent = `–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (${Math.floor(currentAutoClickerPrice)} –æ—á–∫–æ–≤)`;
    multiplierButton.textContent = `–ú–Ω–æ–∂–∏—Ç–µ–ª—å x1.25 (${Math.floor(currentMultiplierPrice)} –æ—á–∫–æ–≤)`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ú–æ—Ä–≥–∞–Ω–µ
clickArea.addEventListener('click', () => {
    const currentTime = Date.now();
    const timeDiff = (currentTime - lastClickTime) / 1000;
    
    if (timeDiff < 1) {
        clicksPerSecond = 1 / timeDiff;
    }
    
    lastClickTime = currentTime;
    createScorePopup(1);
    updateScore(1);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
    clickArea.style.transform = 'scale(0.95)';
    setTimeout(() => {
        clickArea.style.transform = '';
    }, 100);
});

// –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
function autoClick() {
    if (autoClickerCount > 0) {
        createScorePopup(autoClickerCount);
        updateScore(autoClickerCount);
    }
}

// –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
let musicTrackBasePrice = 1000;
let currentMusicTrackPrice = musicTrackBasePrice;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function updateShopPrices() {
    document.getElementById('autoClickerPrice').textContent = Math.floor(currentAutoClickerPrice);
    document.getElementById('multiplierPrice').textContent = Math.floor(currentMultiplierPrice);
    document.getElementById('musicTrackPrice').textContent = Math.floor(currentMusicTrackPrice);
    document.getElementById('speedUpgradePrice').textContent = Math.floor(currentSpeedUpgradePrice);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function updateShopButtons() {
    const autoClickerButton = document.getElementById('autoClickerButton');
    const multiplierButton = document.getElementById('multiplierButton');
    const musicTrackButton = document.getElementById('musicTrackButton');
    const speedUpgradeButton = document.getElementById('speedUpgradeButton');
    
    if (autoClickerButton) {
        autoClickerButton.disabled = score < currentAutoClickerPrice;
        autoClickerButton.classList.toggle('disabled', score < currentAutoClickerPrice);
    }
    
    if (multiplierButton) {
        multiplierButton.disabled = score < currentMultiplierPrice;
        multiplierButton.classList.toggle('disabled', score < currentMultiplierPrice);
    }
    
    if (musicTrackButton) {
        const allTracksUnlocked = tracks.every(track => track.unlocked);
        musicTrackButton.disabled = score < currentMusicTrackPrice || allTracksUnlocked;
        musicTrackButton.classList.toggle('disabled', score < currentMusicTrackPrice || allTracksUnlocked);
        
        if (allTracksUnlocked) {
            musicTrackButton.textContent = '–í—Å–µ —Ç—Ä–µ–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã';
        }
    }
    
    if (speedUpgradeButton) {
        speedUpgradeButton.disabled = score < currentSpeedUpgradePrice;
        speedUpgradeButton.classList.toggle('disabled', score < currentSpeedUpgradePrice);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore(amount) {
    const oldScore = score;
    score += amount * multiplier;
    scoreElement.textContent = Math.floor(score);
    
    clicksPerSecondElement.textContent = (clicksPerSecond + autoClickerCount).toFixed(1);
    updateShopButtons();
    updateShopPrices();
}

// –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
document.getElementById('autoClickerButton').addEventListener('click', () => {
    if (score >= currentAutoClickerPrice) {
        score -= currentAutoClickerPrice;
        autoClickerCount++;
        currentAutoClickerPrice = Math.floor(autoClickerBasePrice * Math.pow(priceGrowthRate, autoClickerCount));
        updateScore(0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∫—É–ø–ª–µ–Ω!');
        
        if (autoClickerCount === 1) {
            window.autoClickerInterval = setInterval(autoClick, autoClickerInterval);
        }
    }
});

// –ü–æ–∫—É–ø–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
document.getElementById('multiplierButton').addEventListener('click', () => {
    if (score >= currentMultiplierPrice) {
        score -= currentMultiplierPrice;
        multiplierLevel++;
        multiplier *= 1.25;
        currentMultiplierPrice = Math.floor(multiplierBasePrice * Math.pow(priceGrowthRate, multiplierLevel));
        updateScore(0);
        
        showNotification('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É–ø–ª–µ–Ω!');
    }
});

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
document.getElementById('speedUpgradeButton').addEventListener('click', () => {
    if (score >= currentSpeedUpgradePrice) {
        score -= currentSpeedUpgradePrice;
        speedUpgradeLevel++;
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ 10%
        autoClickerInterval *= speedUpgradeMultiplier;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        currentSpeedUpgradePrice = Math.floor(speedUpgradeBasePrice * Math.pow(priceGrowthRate, speedUpgradeLevel));
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if (autoClickerCount > 0) {
            clearInterval(window.autoClickerInterval);
            window.autoClickerInterval = setInterval(autoClick, autoClickerInterval);
        }
        
        updateScore(0);
        showNotification('–°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
document.getElementById('musicTrackButton').addEventListener('click', () => {
    const lockedTrackIndex = tracks.findIndex(track => !track.unlocked);
    
    if (score >= currentMusicTrackPrice && lockedTrackIndex !== -1) {
        score -= currentMusicTrackPrice;
        tracks[lockedTrackIndex].unlocked = true;
        
        currentMusicTrackPrice *= 5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤ 5 —Ä–∞–∑
        
        updateScore(0);
        updateShopPrices();
        updateShopButtons();
        updateTracksList();
        
        showNotification(`–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫: ${tracks[lockedTrackIndex].title}!`);
        preloadAudio(tracks[lockedTrackIndex].url);
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(() => {
    clicksPerSecond = 0;
    clicksPerSecondElement.textContent = autoClickerCount.toFixed(1);
    updateShopButtons();
}, 1000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
updateShopPrices();
updateShopButtons();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏—Ü
function createParticles() {
    const container = document.querySelector('.particles-container');
    const particleCount = 30;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';

    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        particle.style.left = Math.random() * 100 + '%';
        particle.style.top = Math.random() * 100 + '%';
        
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        particle.style.animationDelay = Math.random() * 10 + 's';
        
        container.appendChild(particle);
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—É –∫–æ–≥–¥–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
        particle.addEventListener('animationend', () => {
            particle.style.top = '100%';
            particle.style.left = Math.random() * 100 + '%';
            void particle.offsetWidth; // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            particle.style.top = Math.random() * 100 + '%';
        });
    }
}

// –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', createParticles);

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏
function encodeGameState() {
    const gameState = {
        score: score,
        autoClickerCount: autoClickerCount,
        multiplier: multiplier,
        multiplierLevel: multiplierLevel,
        currentAutoClickerPrice: currentAutoClickerPrice,
        currentMultiplierPrice: currentMultiplierPrice,
        currentMusicTrackPrice: currentMusicTrackPrice,
        currentSpeedUpgradePrice: currentSpeedUpgradePrice,
        speedUpgradeLevel: speedUpgradeLevel,
        autoClickerInterval: autoClickerInterval,
        wallpaperMode: wallpaperMode,
        tracks: tracks.map(track => ({
            title: track.title,
            unlocked: track.unlocked
        }))
    };
    
    const jsonString = JSON.stringify(gameState);
    const encodedString = btoa(jsonString);
    
    return encodedString.split('').map(char => 
        String.fromCharCode(char.charCodeAt(0) + 1)
    ).join('');
}

function decodeGameState(encodedString) {
    try {
        const decodedBase64 = encodedString.split('').map(char => 
            String.fromCharCode(char.charCodeAt(0) - 1)
        ).join('');
        
        const jsonString = atob(decodedBase64);
        const gameState = JSON.parse(jsonString);
        
        const requiredFields = [
            'score', 
            'autoClickerCount', 
            'multiplier', 
            'multiplierLevel', 
            'currentAutoClickerPrice', 
            'currentMultiplierPrice',
            'currentMusicTrackPrice',
            'currentSpeedUpgradePrice',
            'speedUpgradeLevel',
            'autoClickerInterval',
            'wallpaperMode',
            'tracks'
        ];
        
        if (!requiredFields.every(field => gameState.hasOwnProperty(field))) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
        return gameState;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ:', error);
        return null;
    }
}

function loadGameState(gameState) {
    score = gameState.score;
    autoClickerCount = gameState.autoClickerCount;
    multiplier = gameState.multiplier;
    multiplierLevel = gameState.multiplierLevel;
    currentAutoClickerPrice = gameState.currentAutoClickerPrice;
    currentMultiplierPrice = gameState.currentMultiplierPrice;
    currentMusicTrackPrice = gameState.currentMusicTrackPrice;
    currentSpeedUpgradePrice = gameState.currentSpeedUpgradePrice;
    speedUpgradeLevel = gameState.speedUpgradeLevel;
    autoClickerInterval = gameState.autoClickerInterval;
    wallpaperMode = gameState.wallpaperMode;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
    gameState.tracks.forEach(savedTrack => {
        const track = tracks.find(t => t.title === savedTrack.title);
        if (track) {
            track.unlocked = savedTrack.unlocked;
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScore(0);
    updateButtonTexts();
    updateTracksList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –æ–±–æ–µ–≤
    document.querySelector(`input[value="${wallpaperMode}"]`).checked = true;
    updateWallpaper();
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    if (autoClickerCount > 0) {
        clearInterval(window.autoClickerInterval);
        window.autoClickerInterval = setInterval(autoClick, autoClickerInterval);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.className = `notification ${type}`;
    document.body.appendChild(notification);
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 500);
    }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞
document.getElementById('exportButton').addEventListener('click', () => {
    const saveCode = encodeGameState();
    const importInput = document.getElementById('importInput');
    importInput.style.display = 'block';
    importInput.value = saveCode;
    importInput.select();
    document.execCommand('copy');
    
    showNotification('–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    
    setTimeout(() => {
        importInput.style.display = 'none';
    }, 5000);
});

document.getElementById('importButton').addEventListener('click', () => {
    const importInput = document.getElementById('importInput');
    importInput.style.display = 'block';
    importInput.value = '';
    importInput.focus();
});

document.getElementById('importInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        const saveCode = e.target.value.trim();
        const gameState = decodeGameState(saveCode);
        
        if (gameState) {
            loadGameState(gameState);
            e.target.style.display = 'none';
            showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
        } else {
            showNotification('–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.', 'error');
        }
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const settingsIcon = document.querySelector('.settings-icon');
    const settingsModal = document.querySelector('.settings-modal');
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settingsIcon.addEventListener('click', () => {
        settingsModal.classList.toggle('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!settingsModal.contains(e.target) && !settingsIcon.contains(e.target)) {
            settingsModal.classList.remove('active');
        }
    });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    settingsModal.addEventListener('click', (e) => {
        e.stopPropagation();
    });
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º
const shopIcon = document.querySelector('.shop-icon');
const shopOverlay = document.querySelector('.shop-overlay');
const shopContainer = document.querySelector('.shop-container');
const shopClose = document.querySelector('.shop-close');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
shopIcon.addEventListener('click', () => {
    shopOverlay.classList.add('active');
    shopContainer.classList.add('active');
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∫
    document.querySelectorAll('.shop-item').forEach(item => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(50px)';
        setTimeout(() => {
            item.style.opacity = '1';
            item.style.transform = 'translateY(0)';
        }, parseFloat(item.style.animationDelay) * 1000);
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
shopClose.addEventListener('click', () => {
    shopOverlay.classList.remove('active');
    shopContainer.classList.remove('active');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
shopOverlay.addEventListener('click', (e) => {
    if (e.target === shopOverlay) {
        shopOverlay.classList.remove('active');
        shopContainer.classList.remove('active');
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
shopContainer.addEventListener('click', (e) => {
    e.stopPropagation();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    updateTracksList();
});

let wallpaperMode = 'auto';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ–µ–≤
function updateWallpaper() {
    const currentHour = new Date().getHours();
    const isDaytime = currentHour >= 8 && currentHour < 16;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π URL –æ–±–æ–µ–≤
    const currentWallpaper = document.body.style.backgroundImage;
    let newWallpaper;
    
    switch (wallpaperMode) {
        case 'auto':
            newWallpaper = isDaytime ? 'url("wallpaper day.jpg")' : 'url("wallpaper.jpg")';
            break;
        case 'day':
            newWallpaper = 'url("wallpaper day.jpg")';
            break;
        case 'night':
            newWallpaper = 'url("wallpaper.jpg")';
            break;
    }
    
    // –ï—Å–ª–∏ –æ–±–æ–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è—é—Ç—Å—è
    if (currentWallpaper !== newWallpaper) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±–æ–∏ –∫–∞–∫ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç–∞
        document.body.style.setProperty('--current-wallpaper', currentWallpaper || newWallpaper);
        document.body.classList.add('switching-wallpaper');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ–±–æ–∏ –¥–ª—è body
        document.body.style.backgroundImage = newWallpaper;
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            document.body.classList.remove('switching-wallpaper');
        }, 1500);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±–æ–µ–≤
document.querySelectorAll('input[name="wallpaperMode"]').forEach(radio => {
    radio.addEventListener('change', (e) => {
        wallpaperMode = e.target.value;
        updateWallpaper();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        const modeTexts = {
            'auto': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –æ–±–æ–µ–≤',
            'day': '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ –æ–±–æ–∏',
            'night': '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ—á–Ω—ã–µ –æ–±–æ–∏'
        };
        showNotification(modeTexts[wallpaperMode]);
    });
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    updateWallpaper();
    createParticles();
    updateTracksList();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    const savedMode = localStorage.getItem('wallpaperMode');
    if (savedMode) {
        wallpaperMode = savedMode;
        document.querySelector(`input[value="${savedMode}"]`).checked = true;
        updateWallpaper();
    }
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –æ–±–æ–µ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
function saveWallpaperMode(mode) {
    localStorage.setItem('wallpaperMode', mode);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
document.querySelectorAll('input[name="wallpaperMode"]').forEach(radio => {
    radio.addEventListener('change', (e) => {
        saveWallpaperMode(e.target.value);
    });
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
setInterval(() => {
    if (wallpaperMode === 'auto') {
        updateWallpaper();
    }
}, 60000); 